{
  "extends": ["tslint:latest"],
  "rulesDirectory": [
      "node_modules/tslint-microsoft-contrib"
    ],
    "rules": {
      /**
      * Security Rules. The following rules should be turned on because they find security issues
      * or are recommended in the Microsoft Secure Development Lifecycle (SDL)
      */
      "insecure-random": false,
      "no-banned-terms": true,
      "no-cookies": true,
      "no-delete-expression": true,
      "no-disable-auto-sanitization": true,
      "no-document-domain": true,
      "no-document-write": true,
      "no-eval": true,
      "no-exec-script": true,
      "no-function-constructor-with-string-args": true,
      "no-http-string": [
        true,
        "http://www.example.com/?.*",
        "http://www.examples.com/?.*"
      ],
      "no-inner-html": true,
      "no-octal-literal": true,
      "no-reserved-keywords": false, //true - need to have this in action types [Editor]
      "no-string-based-set-immediate": true,
      "no-string-based-set-interval": true,
      "no-string-based-set-timeout": true,
      "non-literal-require": true,
      "possible-timing-attack": true,
      "react-anchor-blank-noopener": true,
      "react-iframe-missing-sandbox": true,
      "react-no-dangerous-html": true,
      /**
      * Common Bugs and Correctness. The following rules should be turned on because they find
      * common bug patterns in the code or enforce type safety.
      */
      "await-promise": true,
      "forin": true,
      "jquery-deferred-must-complete": true,
      "label-position": true,
      "match-default-export-name": true,
      "mocha-avoid-only": true,
      "mocha-no-side-effect-code": false, // true [Editor]
      "no-any": true,
      "no-arg": false,
      "no-backbone-get-set-outside-model": false,
      "no-bitwise": false,
      "no-conditional-assignment": true,
      "no-constant-condition": true,
      "no-control-regex": true,
      "no-debugger": true,
      "no-duplicate-switch-case": true,
      "no-duplicate-super": true,
      "no-duplicate-variable": true,
      "no-empty": true,
      "no-floating-promises": true,
      "no-for-in-array": true,
      "no-import-side-effect": true,
      "no-invalid-regexp": true,
      "no-invalid-template-strings": true,
      "no-invalid-this": true,
      "no-jquery-raw-elements": true,
      "no-misused-new": true,
      "no-non-null-assertion": true,
      "no-reference-import": true,
      "no-regex-spaces": true,
      "no-sparse-arrays": true,
      "no-stateless-class": false,
      "no-string-literal": true,
      "no-string-throw": true,
      "no-unnecessary-bind": true,
      "no-unnecessary-callback-wrapper": true,
      "no-unnecessary-initializer": true,
      "no-unnecessary-override": true,
      //"no-unsafe-any": true,
      "no-unsafe-finally": true,
      "no-unused-expression": true,
      "no-use-before-declare": true,
      "no-with-statement": true,
      "promise-function-async": true,
      "promise-must-complete": true,
      "radix": true,
      "react-this-binding-issue": true,
      "react-unused-props-and-state": true,
      "restrict-plus-operands": true, // the plus operand should really only be used for strings and numbers
      //"strict-boolean-expressions": true,
      "switch-default": true,
      "max-line-length": [true, 200],
      "triple-equals": [
        true,
        "allow-null-check"
      ],
      "use-isnan": true,
      "use-named-parameter": true,
      "no-implicit-dependencies": false,
      /**
      * Code Clarity. The following rules should be turned on because they make the code
      * generally more clear to the reader.
      */
      "adjacent-overload-signatures": true,
      "array-type": [
        true,
        "array"
      ],
      "arrow-parens": false, // for simple functions the parens on arrow functions are not needed
      "callable-types": false, // true [Editor]
      "chai-prefer-contains-to-index-of": true,
      "chai-vague-errors": true,
      "class-name": true,
      "comment-format": true,
      "completed-docs": [
        false, {
        "classes": true,
        "interfaces": true,
        "enums": true,
        "functions": {"privacies": ["public", "protected"], "tags": {"content": {"see": [".*"]}, "existence": ["inheritdoc", "inheritDoc"]}},
        "methods": {"privacies": ["public", "protected"], "tags": {"content": {"see": [".*"]}, "existence": ["inheritdoc", "inheritDoc"]}},
        "properties": {"privacies": ["public", "protected"], "tags": {"content": {"see": [".*"]}, "existence": ["inheritdoc", "inheritDoc"]}},
        "variables": {"privacies": ["public", "protected"], "tags": {"content": {"see": [".*"]}, "existence": ["inheritdoc", "inheritDoc"]}},
        "types": true
        }
      ],
      "import-name": [
        // TODO: Chat with pidg
        false,
        {
          "rxjs": "Rx"
        }
      ],
      "interface-name": [true, "always-prefix"],
      /* "jsdoc-format": true, */ // we will generate most, not worth it for the asterisk alignment errors
      "max-classes-per-file": [
        true,
        3
      ], // we generally recommend making one public class per file
      "max-file-line-count": true,
      "member-access": [true, "check-accessor", "check-constructor"],
      "missing-jsdoc": false, // true [Editor]
      "mocha-unneeded-done": true,
      "new-parens": true,
      "no-construct": true,
      "no-default-export": false, // true [Editor]
      "no-empty-interface": false, // true [Editor]
      "no-for-in": true,
      "no-function-expression": false,
      "no-inferrable-types": false, // turn no-inferrable-types off in order to make the code consistent in its use of type decorations
      "no-multiline-string": true, // multiline-strings often introduce unnecessary whitespace into the string literals
      "no-null-keyword": false, // turn no-null-keyword off and use undefined to mean not initialized and null to mean without a value
      "no-parameter-properties": false, // true [Editor]
      "no-require-imports": false,
      "no-shadowed-variable": true,
      "no-suspicious-comment": true,
      "no-typeof-undefined": true,
      "no-unnecessary-field-initialization": true,
      "no-unnecessary-local-variable": true,
      "no-unnecessary-qualifier": true,
      "no-unsupported-browser-code": true,
      "no-useless-files": true,
      "no-var-keyword": true,
      "no-var-requires": false,
      "no-this-assignment": true, // [Editor] replaced no-var-self as it was deprecated
      "no-void-expression": true,
      "object-literal-sort-keys": false, // turn object-literal-sort-keys off and sort keys in a meaningful manner
      "one-variable-per-declaration": true,
      "only-arrow-functions": false, // there are many valid reasons to declare a function
      "ordered-imports": false,
      "prefer-array-literal": true,
      "prefer-const": true,
      "prefer-for-of": false,
      "prefer-method-signature": false, // true [Editor]
      "return-undefined": false, // this actually affect the readability of the code
      "no-submodule-imports": false,
      "typedef": [
        true,
        "call-signature",
        // "arrow-call-signature",
        "parameter",
        // "arrow-parameter",
        "property-declaration"
        /* "variable-declaration", */ // infer
        // "member-variable-declaration"
      ],
      "underscore-consistent-invocation": false, //true - [Editor]
      "unified-signatures": true,
      "variable-name": [
        true,
        "ban-keywords",
        "check-format",
        "allow-leading-underscore",
        "allow-pascal-case"
      ],
      /**
      * Whitespace related rules. The only recommended whitespace strategy is to pick a single format and
      * be consistent.
      */
      "align": [
        true,
        "parameters",
        // "arguments",
        "statements"
      ],
      "curly": true,
      "eofline": true,
      "import-spacing": true,
      "indent": [
        true,
        "spaces"
      ],
      "linebreak-style": false, // true [Editor]
      "no-consecutive-blank-lines": true,
      "no-empty-line-after-opening-brace": false,
      "no-trailing-whitespace": true,
      "no-unnecessary-semicolons": true,
      "object-literal-key-quotes": [
        true,
        "as-needed"
      ],
      "one-line": [
        true,
        "check-open-brace",
        "check-catch",
        "check-else",
        "check-whitespace"
      ],
      "quotemark": [
        true,
        "single"
      ],
      "react-tsx-curly-spacing": false, // true [Editor]
      "semicolon": [
        true,
        "always"
      ],
      "trailing-comma": [
        true,
        {
          "singleline": "never",
          "multiline": "never"
        }
      ], // forcing trailing commas for multi-line
      // lists results in lists that are easier to reorder and version control diffs that are more clear.
      // Many teams like to have multiline be 'always'. There is no clear consensus on this rule but the
      // internal MS JavaScript coding standard does discourage it.
      "typedef-whitespace": false,
      "whitespace": [
        true,
        "check-branch",
        "check-decl",
        "check-operator",
        "check-separator",
        "check-type"
      ],
      /**
      * Controversial/Configurable rules.
      */
      "ban": false, // only enable this if you have some code pattern that you want to ban
      "ban-types": true,
      "cyclomatic-complexity": true,
      "file-header": false, // enable this rule only if you are legally required to add a file header
      "import-blacklist": false, // enable and configure this as you desire
      "interface-over-type-literal": false, // there are plenty of reasons to prefer interfaces
      "no-angle-bracket-type-assertion": false, // pick either type-cast format and use it consistently
      "no-inferred-empty-object-type": false, // if the compiler is satisfied then this is probably not an issue
      "no-internal-module": false, // only enable this if you are not using internal modules
      "no-magic-numbers": false, // by default it will find too many false positives
      "no-mergeable-namespace": false, // your project may require mergeable namespaces
      "no-namespace": false, // only enable this if you are not using modules/namespaces
      "no-reference": true, // in general you should use a module system and not /// reference imports
      "no-unexternalized-strings": false, // the VS Code team has a specific localization process that this rule enforces
      "object-literal-shorthand": false, // object-literal-shorthand offers an abbreviation not an abstraction
      "prefer-type-cast": true, // pick either type-cast format and use it consistently
      "space-before-function-paren": false, // turn this on if this is really your coding standard
      /**
      * Deprecated rules.  The following rules are deprecated for various reasons.
      */
      "missing-optional-annotation": false, // now supported by TypeScript compiler
      "no-duplicate-parameter-names": false, // now supported by TypeScript compiler
      "no-empty-interfaces": false, // use tslint no-empty-interface rule instead
      "no-missing-visibility-modifiers": false, // use tslint member-access rule instead
      "no-multiple-var-decl": false, // use tslint one-variable-per-declaration rule instead
      "no-switch-case-fall-through": false, // now supported by TypeScript compiler
      "no-unused-variable": true,
      "member-ordering": [
        true,
        {
          "order": [
            // statics
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            // variables
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            // public methods
            "public-static-method",
            "public-constructor",
            "public-instance-method",
            // protected methods
            "protected-static-method",
            "protected-constructor",
            "protected-instance-method",
            // private methods
            "private-static-method",
            "private-constructor",
            "private-instance-method"
          ]
        }
      ]
    }
  }
